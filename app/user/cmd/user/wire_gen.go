// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/qqz/Happy-Stream/app/user/internal/biz"
	"github.com/qqz/Happy-Stream/app/user/internal/conf"
	"github.com/qqz/Happy-Stream/app/user/internal/data"
	"github.com/qqz/Happy-Stream/app/user/internal/server"
	"github.com/qqz/Happy-Stream/app/user/internal/service"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData)
	client := data.NewRedis(confData)
	dataData, cleanup, err := data.NewData(confData, logger, db, client)
	if err != nil {
		return nil, nil, err
	}
	authRepo := data.NewAuthRepo(dataData, logger)
	roleRepo := data.NewRoleRepo(dataData, logger)
	roleUseCase := biz.NewRoleUseCase(roleRepo, logger)
	memberRepo := data.NewMemberRepo(dataData, logger)
	memberUseCase := biz.NewMemberUseCase(memberRepo, logger)
	authUseCase := biz.NewAuthUseCase(authRepo, logger, roleUseCase, memberUseCase)
	permissionRepo := data.NewPermissionRepo(dataData, logger)
	permissionUseCase := biz.NewPermissionUseCase(permissionRepo, logger)
	userService := service.NewUserService(authUseCase, memberUseCase, permissionUseCase, roleUseCase, logger)
	httpServer := server.NewHTTPServer(confServer, userService, logger)
	grpcServer := server.NewGRPCServer(confServer, userService, logger)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
