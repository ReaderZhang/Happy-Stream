// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type OrderHTTPServer interface {
	ChangeOrder(context.Context, *OrderChangeReq) (*OrderChangeReply, error)
	ListOrder(context.Context, *ListOrderQueryReq) (*ListOrderQueryReply, error)
	QueryOrder(context.Context, *OrderQueryReq) (*OrderQueryReply, error)
	RemoveOrder(context.Context, *OrderRemoveReq) (*OrderRemoveReply, error)
}

func RegisterOrderHTTPServer(s *http.Server, srv OrderHTTPServer) {
	r := s.Route("/")
	r.DELETE("/v1/order/delete/{id}", _Order_RemoveOrder0_HTTP_Handler(srv))
	r.PATCH("/v1/order/patch", _Order_ChangeOrder0_HTTP_Handler(srv))
	r.GET("/v1/order/list", _Order_ListOrder0_HTTP_Handler(srv))
	r.GET("/v1/order/get/{id}", _Order_QueryOrder0_HTTP_Handler(srv))
}

func _Order_RemoveOrder0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderRemoveReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/order.v1.Order/RemoveOrder")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemoveOrder(ctx, req.(*OrderRemoveReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderRemoveReply)
		return ctx.Result(200, reply)
	}
}

func _Order_ChangeOrder0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderChangeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/order.v1.Order/ChangeOrder")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeOrder(ctx, req.(*OrderChangeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderChangeReply)
		return ctx.Result(200, reply)
	}
}

func _Order_ListOrder0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOrderQueryReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/order.v1.Order/ListOrder")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOrder(ctx, req.(*ListOrderQueryReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOrderQueryReply)
		return ctx.Result(200, reply)
	}
}

func _Order_QueryOrder0_HTTP_Handler(srv OrderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderQueryReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/order.v1.Order/QueryOrder")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.QueryOrder(ctx, req.(*OrderQueryReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderQueryReply)
		return ctx.Result(200, reply)
	}
}

type OrderHTTPClient interface {
	ChangeOrder(ctx context.Context, req *OrderChangeReq, opts ...http.CallOption) (rsp *OrderChangeReply, err error)
	ListOrder(ctx context.Context, req *ListOrderQueryReq, opts ...http.CallOption) (rsp *ListOrderQueryReply, err error)
	QueryOrder(ctx context.Context, req *OrderQueryReq, opts ...http.CallOption) (rsp *OrderQueryReply, err error)
	RemoveOrder(ctx context.Context, req *OrderRemoveReq, opts ...http.CallOption) (rsp *OrderRemoveReply, err error)
}

type OrderHTTPClientImpl struct {
	cc *http.Client
}

func NewOrderHTTPClient(client *http.Client) OrderHTTPClient {
	return &OrderHTTPClientImpl{client}
}

func (c *OrderHTTPClientImpl) ChangeOrder(ctx context.Context, in *OrderChangeReq, opts ...http.CallOption) (*OrderChangeReply, error) {
	var out OrderChangeReply
	pattern := "/v1/order/patch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/order.v1.Order/ChangeOrder"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OrderHTTPClientImpl) ListOrder(ctx context.Context, in *ListOrderQueryReq, opts ...http.CallOption) (*ListOrderQueryReply, error) {
	var out ListOrderQueryReply
	pattern := "/v1/order/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/order.v1.Order/ListOrder"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OrderHTTPClientImpl) QueryOrder(ctx context.Context, in *OrderQueryReq, opts ...http.CallOption) (*OrderQueryReply, error) {
	var out OrderQueryReply
	pattern := "/v1/order/get/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/order.v1.Order/QueryOrder"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OrderHTTPClientImpl) RemoveOrder(ctx context.Context, in *OrderRemoveReq, opts ...http.CallOption) (*OrderRemoveReply, error) {
	var out OrderRemoveReply
	pattern := "/v1/order/delete/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/order.v1.Order/RemoveOrder"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
